package com.example.testtask

import androidx.room.Room
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import com.example.testtask.AlbumTestHelper.equalsWithoutId
import com.example.testtask.data.db.AlbumDao
import com.example.testtask.data.db.AlbumEntity
import com.example.testtask.data.db.AppDatabase
import junit.framework.TestCase.assertEquals
import junit.framework.TestCase.assertTrue
import kotlinx.coroutines.runBlocking
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class AlbumDaoTest {

    private lateinit var db: AppDatabase
    private lateinit var albumDao: AlbumDao

    @Throws(Exception::class)
    @Before
    fun createDb() {
        db = Room.inMemoryDatabaseBuilder(
            context = InstrumentationRegistry.getInstrumentation().targetContext,
            klass = AppDatabase::class.java
        ).build()
        albumDao = db.albumDao()
    }

    @Test
    @Throws(Exception::class)
    fun whenInsertAlbumThenReadTheSameEntity() {
        val album: AlbumEntity = AlbumTestHelper.getMockAlbum()
        runBlocking { albumDao.insert(album) }
        val dbAlbums: List<AlbumEntity> = runBlocking {
            albumDao.getAlbumList().orEmpty()
        }
        assertEquals(1, dbAlbums.size)

        /** Here we use equalsWithoutId since id value
         *  will be autogenerated after inserting in database */
        assertTrue(album.equalsWithoutId(dbAlbums.firstOrNull()))
    }

    @Test
    @Throws(Exception::class)
    fun whenUpdateAlbumThenReadTheSameEntity() {
        val albumForInsert: AlbumEntity = AlbumTestHelper.getMockAlbum()
        runBlocking { albumDao.insert(albumForInsert) }

        val oldAlbumInDb = runBlocking { albumDao.getAlbumList()?.firstOrNull() ?: throw Exception() }
        val newAlbumForUpdate = oldAlbumInDb.copy(title = "Recent Dogs photos")
        runBlocking { albumDao.update(newAlbumForUpdate) }

        val updatedAlbumInDb = runBlocking { albumDao.getAlbumList()?.firstOrNull() }
        assertTrue(newAlbumForUpdate == updatedAlbumInDb)
    }

    @Test
    @Throws(Exception::class)
    fun whenDeleteAllThenReadNothing() {
        val mockedAlbumList = AlbumTestHelper.createMockAlbumList(5)
        runBlocking {
            albumDao.insert(*mockedAlbumList.toTypedArray())
            albumDao.deleteAll()
        }

        val albumList = runBlocking { albumDao.getAlbumList().orEmpty() }
        assertTrue(albumList.isEmpty())
    }

    @Test
    @Throws(Exception::class)
    fun whenDeleteAlbumThenReadNothing() {
        val albumForInsert: AlbumEntity = AlbumTestHelper.getMockAlbum()
        runBlocking {
            albumDao.insert(albumForInsert)

            val albumInDb = albumDao.getAlbumList()?.firstOrNull() ?: throw Exception()
            albumDao.delete(albumInDb)
        }

        val albumList = runBlocking { albumDao.getAlbumList().orEmpty() }
        assertTrue(albumList.isEmpty())
    }

    @Test
    @Throws(Exception::class)
    fun whenInsertAlbumsThenReadThem() {
        val mockedAlbumList = AlbumTestHelper.createMockAlbumList(5)
        runBlocking { albumDao.insert(*mockedAlbumList.toTypedArray()) }

        val albumListInDb = runBlocking { albumDao.getAlbumList().orEmpty() }
        assertEquals(5, albumListInDb.size)
    }

    @Test
    @Throws(Exception::class)
    fun whenInsertAlbumsAndDeleteAllAndInsertOneAlbumThenReadOnlyOneAlbum() {
        val mockedAlbumList = AlbumTestHelper.createMockAlbumList(5)
        runBlocking {
            albumDao.insert(*mockedAlbumList.toTypedArray())
            albumDao.deleteAndInsert(AlbumTestHelper.getMockAlbum())
        }

        val albumListInDb = runBlocking { albumDao.getAlbumList().orEmpty() }
        assertEquals(1, albumListInDb.size)
    }

    @Throws(Exception::class)
    @After
    fun closeDb() {
        db.close()
    }

}